'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { 
  ArrowLeft, 
  ExternalLink, 
  Download, 
  ChevronRight, 
  ChevronDown,
  Menu,
  FileText,
  BookOpen
} from 'lucide-react';
import Script from 'next/script';

// KaTeX CSS for equation rendering
const KatexCSS = () => (
  <>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css"
      integrity="sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn"
      crossOrigin="anonymous"
    />
  </>
);

// Paper data
const paperData = {
  arxiv_id: 'test-paper',
  title: 'Test Paper with Folder-Based Routing and Equation Support: $E = mc^2$',
  authors: 'John Doe, Jane Smith',
  abstract: 'This is a test paper to demonstrate folder-based routing in Next.js with DeepWiki-like interface. The paper includes static data generated by the backend and supports LaTeX equations like $E = mc^2$ and $$F = G\\frac{m_1 m_2}{r^2}$$',
};

// Sections data with math equations
const sectionsData = [
  {
    id: "overview",
    title: "Overview",
    content: "This paper demonstrates the DeepWiki-like interface for academic papers. The interface features sections and subsections with a navigation sidebar for quick access to different parts of the paper.\n\nIn a real implementation, this content would be generated by Google's LLM based on the extracted text from the PDF.\n\n# Key Equations\n\nHere are some example equations:\n\n$$E = mc^2$$\n\n$$\\nabla \\times \\vec{\\mathbf{B}} = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} + \\frac{1}{c}\\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t}$$",
    subsections: [
      {
        id: "introduction",
        title: "Introduction",
        content: "This is a sample introduction to the paper. It would typically provide context for the research, outline the problem being addressed, and summarize the approach taken.\n\n# Problem Statement\n\nThe central problem can be formulated as finding a solution to the following equation:\n\n$$\\min_{\\theta} \\frac{1}{N} \\sum_{i=1}^{N} L(f(x_i; \\theta), y_i) + \\lambda R(\\theta)$$\n\nWhere $\\theta$ represents model parameters, $f(x_i; \\theta)$ is the model prediction, and $L$ is a loss function."
      },
      {
        id: "background",
        title: "Background",
        content: "The background section would typically review relevant literature and provide necessary context for understanding the research contribution.\n\n## Previous Work\n\nPrevious research has established the relationship:\n\n$$P(A|B) = \\frac{P(B|A)P(A)}{P(B)}$$\n\nThis forms the foundation of our approach."
      }
    ]
  },
  {
    id: "methodology",
    title: "Methodology",
    content: "The methodology section describes the approach, experiments, and techniques used in the research.\n\n# Algorithm\n\nOur method can be summarized in the following steps:\n\n* Step 1: Initialize parameters $\\theta_0$\n* Step 2: For each iteration $t$:\n  * Compute gradient: $g_t = \\nabla_\\theta L(\\theta_t)$\n  * Update parameters: $\\theta_{t+1} = \\theta_t - \\alpha g_t$\n* Step 3: Return final parameters $\\theta_T$\n\n```python\ndef algorithm(data, learning_rate=0.01):\n    theta = initialize_parameters()\n    for t in range(num_iterations):\n        grad = compute_gradient(data, theta)\n        theta = theta - learning_rate * grad\n    return theta\n```",
    subsections: [
      {
        id: "data-collection",
        title: "Data Collection",
        content: "This section would describe how data was collected for the research, including sources, sampling methods, and preprocessing steps.\n\n## Sampling Process\n\nThe sampling distribution follows:\n\n$$P(x) = \\frac{1}{Z} e^{-\\beta H(x)}$$\n\nWhere $Z$ is the partition function and $H(x)$ is the energy function."
      },
      {
        id: "analysis",
        title: "Analysis Techniques",
        content: "This section would detail the analytical methods, algorithms, and statistical techniques applied to the collected data.\n\n## Statistical Methods\n\nWe employ several statistical tests including:\n\n* t-tests for comparing means\n* ANOVA for multi-group comparisons\n* Regression analysis: $y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\varepsilon$"
      }
    ]
  },
  {
    id: "results",
    title: "Results",
    content: "The results section presents the findings of the research, including tables, figures, and interpretations of the data analysis.\n\n# Primary Findings\n\nOur main result can be expressed as:\n\n$$\\hat{y} = f(x) \\pm \\sigma$$\n\nWhere $\\sigma$ represents the standard deviation of our measurements.",
    subsections: []
  },
  {
    id: "conclusion",
    title: "Conclusion",
    content: "The conclusion summarizes the key findings, discusses implications, and suggests directions for future research.\n\n# Summary\n\nWe have demonstrated that:\n\n$$\\lim_{n \\to \\infty} \\frac{1}{n} \\sum_{i=1}^{n} X_i = \\mathbb{E}[X]$$\n\nThis confirms our initial hypothesis and opens new avenues for research.",
    subsections: []
  }
];

export default function PaperPage() {
  const [activeSection, setActiveSection] = useState(sectionsData[0]?.id);
  const [activeSubsection, setActiveSubsection] = useState(null);
  const [expandedSections, setExpandedSections] = useState({});
  const [sidebarOpen, setSidebarOpen] = useState(true);
  
  const activeSectionRef = useRef(null);
  
  // Initialize section expansion state
  useEffect(() => {
    const initialExpandedSections = {};
    sectionsData.forEach(section => {
      initialExpandedSections[section.id] = true;
    });
    setExpandedSections(initialExpandedSections);
  }, []);
  
  // Scroll to the active section when it changes
  useEffect(() => {
    if (activeSectionRef.current) {
      activeSectionRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [activeSection, activeSubsection]);
  
  // Initialize KaTeX for equation rendering
  useEffect(() => {
    const renderMathInElement = window.katex?.renderMathInElement;
    if (renderMathInElement) {
      document.querySelectorAll('.math-content').forEach(el => {
        renderMathInElement(el, {
          delimiters: [
            { left: '$$', right: '$$', display: true },
            { left: '$', right: '$', display: false },
            { left: '\\(', right: '\\)', display: false },
            { left: '\\[', right: '\\]', display: true }
          ],
          throwOnError: false
        });
      });
    }
  }, [activeSection, activeSubsection]);

  // Find the active section content
  const currentSection = sectionsData.find(section => section.id === activeSection);
  const currentSubsection = activeSubsection
    ? currentSection?.subsections?.find(sub => sub.id === activeSubsection)
    : null;
  
  const contentToDisplay = currentSubsection
    ? currentSubsection.content
    : currentSection?.content;
    
  // Function to toggle section expansion
  const toggleSectionExpand = (sectionId) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };
  
  // Function to render content with headings, lists, code blocks, and equations
  const renderContent = (content) => {
    if (!content) return null;
    
    // Split content into paragraphs
    const paragraphs = content.split('\n\n');
    
    return paragraphs.map((paragraph, idx) => {
      // Check if it's a heading with #
      if (paragraph.startsWith('# ')) {
        const headingText = paragraph.substring(2);
        return (
          <h2 id={`heading-${idx}`} key={idx} className="text-xl font-bold mt-6 mb-3 text-gray-800 dark:text-gray-200">
            {headingText}
          </h2>
        );
      } 
      // Check if it's a subheading with ##
      else if (paragraph.startsWith('## ')) {
        const headingText = paragraph.substring(3);
        return (
          <h3 id={`subheading-${idx}`} key={idx} className="text-lg font-semibold mt-5 mb-2 text-gray-700 dark:text-gray-300">
            {headingText}
          </h3>
        );
      }
      // Check if it's a list
      else if (paragraph.match(/^\* /m)) {
        const listItems = paragraph.split(/\n\* /);
        return (
          <ul key={idx} className="list-disc pl-6 mb-4 text-gray-700 dark:text-gray-300">
            {listItems.map((item, i) => {
              // First item might still have the bullet
              const cleanItem = i === 0 ? item.replace(/^\* /, '') : item;
              return <li key={i} className="mb-1 math-content">{cleanItem}</li>;
            })}
          </ul>
        );
      }
      // Check if it's a code block
      else if (paragraph.startsWith('```') && paragraph.endsWith('```')) {
        const langMatch = paragraph.match(/^```(\w+)/);
        const language = langMatch ? langMatch[1] : '';
        const code = paragraph.substring(3 + language.length, paragraph.length - 3);
        
        return (
          <div key={idx} className="bg-gray-100 dark:bg-gray-800/50 rounded-md p-3 my-4 overflow-x-auto font-mono text-sm">
            {language && (
              <div className="text-xs text-gray-500 dark:text-gray-400 mb-2 font-sans">{language}</div>
            )}
            <pre>{code}</pre>
          </div>
        );
      }
      // Regular paragraph with math support
      else {
        return (
          <p key={idx} className="mb-4 text-gray-700 dark:text-gray-300 math-content leading-relaxed">
            {paragraph}
          </p>
        );
      }
    });
  };

  return (
    <>
      <KatexCSS />
      <Script
        src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js"
        integrity="sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx"
        crossOrigin="anonymous"
        strategy="afterInteractive"
      />
      <Script
        src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js"
        integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05"
        crossOrigin="anonymous"
        strategy="afterInteractive"
      />

      <div className="flex flex-col h-screen bg-gray-100 dark:bg-gray-900">
        {/* Header */}
        <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 py-2 px-4">
          <div className="max-w-7xl mx-auto flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link 
                href="/" 
                className="flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
              >
                <ArrowLeft className="w-4 h-4 mr-1" />
                <span className="font-medium">DeepRxiv</span>
              </Link>
              
              <div className="text-sm text-gray-500 dark:text-gray-400 hidden md:block">
                {paperData.arxiv_id}
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <a 
                href={`https://arxiv.org/abs/${paperData.arxiv_id}`}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 text-sm"
              >
                <ExternalLink className="w-3.5 h-3.5 mr-1" />
                <span>arXiv</span>
              </a>
              
              <a 
                href={`https://arxiv.org/pdf/${paperData.arxiv_id}.pdf`}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 text-sm"
              >
                <Download className="w-3.5 h-3.5 mr-1" />
                <span>PDF</span>
              </a>
              
              <button 
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="md:hidden inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 text-sm"
              >
                <Menu className="w-5 h-5" />
              </button>
            </div>
          </div>
        </header>

        <div className="flex flex-1 overflow-hidden">
          {/* Left sidebar with sections - collapsible on mobile */}
          <div className={`${sidebarOpen ? 'block' : 'hidden'} md:block w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto`}>
            <div className="py-6 px-4">
              <div className="mb-6">
                <h3 className="text-sm uppercase tracking-wider text-gray-500 dark:text-gray-400 font-medium mb-3">Paper Info</h3>
                
                <div className="space-y-2">
                  <div className="text-xs text-gray-500 dark:text-gray-400">
                    arXiv ID: {paperData.arxiv_id}
                  </div>
                  
                  {paperData.authors && (
                    <div>
                      <div className="text-xs text-gray-500 dark:text-gray-400 font-medium">Authors</div>
                      <div className="text-xs text-gray-600 dark:text-gray-300 leading-relaxed">
                        {paperData.authors}
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              <h3 className="text-sm uppercase tracking-wider text-gray-500 dark:text-gray-400 font-medium mb-3">Sections</h3>
              <nav className="space-y-1">
                {sectionsData.map(section => (
                  <div key={section.id} className="mb-2">
                    <div className="flex items-start">
                      <button
                        onClick={() => toggleSectionExpand(section.id)}
                        className="mr-1 mt-1.5 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300"
                      >
                        {expandedSections[section.id] ? (
                          <ChevronDown className="w-3 h-3" />
                        ) : (
                          <ChevronRight className="w-3 h-3" />
                        )}
                      </button>
                      
                      <button
                        onClick={() => {
                          setActiveSection(section.id);
                          setActiveSubsection(null);
                        }}
                        className={`flex w-full items-center py-1.5 text-sm font-medium rounded-md ${
                          activeSection === section.id && !activeSubsection
                            ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400 font-semibold'
                            : 'text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                        }`}
                      >
                        {section.title}
                      </button>
                    </div>
                    
                    {/* Subsections */}
                    {expandedSections[section.id] && section.subsections && section.subsections.length > 0 && (
                      <div className="pl-6 mt-1 space-y-1">
                        {section.subsections.map(subsection => (
                          <button
                            key={subsection.id}
                            onClick={() => {
                              setActiveSection(section.id);
                              setActiveSubsection(subsection.id);
                            }}
                            className={`flex w-full items-center pl-2 py-1 text-xs font-medium rounded-md ${
                              activeSection === section.id && activeSubsection === subsection.id
                                ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                            }`}
                          >
                            <ChevronRight className="w-3 h-3 mr-1 opacity-70" />
                            {subsection.title}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </nav>
            </div>
          </div>

          {/* Main content */}
          <div className="flex-1 overflow-auto">
            {/* Paper header */}
            <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 py-6">
              <div className="max-w-4xl mx-auto px-4">
                <h1 className="text-2xl sm:text-3xl font-bold leading-tight mb-5 text-gray-900 dark:text-white math-content">
                  {paperData.title}
                </h1>
                
                {paperData.abstract && (
                  <div className="mb-4 bg-gray-50 dark:bg-gray-800/80 border border-gray-100 dark:border-gray-700 rounded-lg p-4">
                    <h2 className="text-sm uppercase tracking-wider text-gray-500 dark:text-gray-400 font-medium mb-2">Abstract</h2>
                    <p className="text-sm text-gray-700 dark:text-gray-300 math-content leading-relaxed">
                      {paperData.abstract}
                    </p>
                  </div>
                )}
              </div>
            </div>
            
            {/* Section content */}
            <div className="py-8 px-4">
              <div className="max-w-4xl mx-auto">
                <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 mb-8">
                  <BookOpen className="w-4 h-4" />
                  <span>
                    {currentSubsection 
                      ? `${currentSection?.title} / ${currentSubsection.title}` 
                      : currentSection?.title}
                  </span>
                </div>
                
                <div ref={activeSectionRef} className="prose dark:prose-invert max-w-none">
                  <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-5">
                    {currentSubsection ? currentSubsection.title : currentSection?.title}
                  </h2>
                  
                  <div className="math-content">
                    {renderContent(contentToDisplay)}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Right sidebar with "On this page" (TOC) - desktop only */}
          <div className="hidden lg:block w-56 bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 overflow-y-auto">
            <div className="py-6 px-4">
              <h3 className="text-sm uppercase tracking-wider text-gray-500 dark:text-gray-400 font-medium mb-3">On this page</h3>
              <nav className="space-y-1">
                <button
                  onClick={() => {
                    activeSectionRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
                  }}
                  className="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 block mb-2"
                >
                  {currentSubsection ? currentSubsection.title : currentSection?.title}
                </button>
                
                {/* Content headings (would be generated dynamically from content) */}
                <div className="pl-2 border-l border-gray-200 dark:border-gray-700">
                  <div className="space-y-1">
                    {contentToDisplay?.includes('# Key Equations') && (
                      <button 
                        onClick={() => document.getElementById('heading-2')?.scrollIntoView({ behavior: 'smooth' })}
                        className="text-xs text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 block"
                      >
                        Key Equations
                      </button>
                    )}
                    {contentToDisplay?.includes('# Problem Statement') && (
                      <button 
                        onClick={() => document.getElementById('heading-2')?.scrollIntoView({ behavior: 'smooth' })}
                        className="text-xs text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 block"
                      >
                        Problem Statement
                      </button>
                    )}
                    {contentToDisplay?.includes('## Previous Work') && (
                      <button 
                        onClick={() => document.getElementById('subheading-3')?.scrollIntoView({ behavior: 'smooth' })}
                        className="text-xs text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 block"
                      >
                        Previous Work
                      </button>
                    )}
                    {contentToDisplay?.includes('# Algorithm') && (
                      <button 
                        onClick={() => document.getElementById('heading-2')?.scrollIntoView({ behavior: 'smooth' })}
                        className="text-xs text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 block"
                      >
                        Algorithm
                      </button>
                    )}
                  </div>
                </div>
              </nav>
              
              {/* Metadata */}
              <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                <h3 className="text-sm uppercase tracking-wider text-gray-500 dark:text-gray-400 font-medium mb-3">Source</h3>
                
                <div className="text-xs text-gray-500 dark:text-gray-400">
                  <a 
                    href={`https://arxiv.org/abs/${paperData.arxiv_id}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center hover:text-blue-600 dark:hover:text-blue-400"
                  >
                    <ExternalLink className="w-3 h-3 mr-1" />
                    <span>arxiv.org/abs/{paperData.arxiv_id}</span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
} 